from TwitterAPI import TwitterAPI

TRACK_TERM = ['bernie', 'hillary', 'clinton', 'trump', 'democrat', 'republic', 'sander', 'clinton']

CONSUMER_KEY = 'KO7m8oZSPkcvaShmY4wDQJpNW'
CONSUMER_SECRET = 'ILBOK1bunhVczRfeG9yCCgjQx3rsZbR4Zjqo34tJ0cX1ET5OfK'
ACCESS_TOKEN_KEY = '332139648-yLhvVGUDeEOm3nebFraNhOdWqSHeB9lgp7Ku5q5I'
ACCESS_TOKEN_SECRET = 'en17lcXYq0K2rakUt9rhD6CafO0toGhWjqjUYA7xfgW9Z'

api = TwitterAPI(CONSUMER_KEY,
                 CONSUMER_SECRET,
                 ACCESS_TOKEN_KEY,
                 ACCESS_TOKEN_SECRET)

r = api.request('statuses/filter', {'track': TRACK_TERM})

import codecs
f = codecs.open('output.txt', 'w', encoding='utf8')

for item in r:
    value = item['text'] if 'text' in item else item
#   print(value)
    f.write(value)
f.close()

#!/bin/bash -e
#Minimum earthquake magnitude, you can take as an input.
earthquakeMin="$1"

#Hourly you can download earthquake data from us govt site. (In this you are downloading csv data, which tells you about last one hour magnitude if it is there)
curl http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.csv -o "hour.txt" -s -S -f

#Count the number of lines in csv file (This file also include header)
numLines=`cat hour.txt | wc -l`

# Count of number of lines should be atleast two
if [ $numLines \&lt; 2 ]
then
    echo "isLarger=false"
else
    largest=`tail -n +2 hour.txt | cut -f 5 -d "," | sort -n | tail -n -1` #Get the largest magnitude value of earthquake in hour.txt file
    compare=`echo $largest '>=' $earthquakeMin | bc -l`  # If magnitude of earthquake is greater than your minimum input value then output as 1 else return 0
    #If value is greater than generate key value output from shell script as below example
    #"largest=3.9" 
    #"isLarger=true"
    if [ "$compare" == "1" ]
    then
        echo "largest=$largest"
        echo "isLarger=true"
    else
        echo "isLarger=false" #If value is not larger than generate "isLarger=false"
    fi
fi

#!/bin/bash -e
earthquakeMin="$1"
curl http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.csv -o "hour.txt" -s -S -f 

numLines=`cat hour.txt | wc -l`

if [ $numLines -lt 2 ]
then
	echo "isLarger=false"
else	
	largest=`tail -n +2 hour.txt | cut -f 5 -d "," |sort -n | tail -n 1`
	compare=`echo $largest '>=' $earthquakeMin | bc -l`
	if [ $compare -eq 1 ]
	then 
		echo "largest=$largest"
		echo "isLarger=true"
	else
		echo "isLarger=false"
	fi
fi

2. workflow.xml:
<workflow-app xmlns="practice-test-71" name="wf-name">
<global>
   <job-tracker>${job-tracker}</job-tracker>
   <name-node>${namd-node}</name-node>
   <configuration>
        <property>
            <name>mapred.job.queue.name</name>
            <value>${queueName}</value>
        </property>
    </configuration>
</global>
<start to="shell-action" />
<action name="shell-action">
        <shell xmlns="uri:oozie:shell-action:0.1">
            <exec>/HadoopExam/Oozie/test_71/check-hour.sh</exec>
            <argument>${earthquakeMinThreshold}</argument>
            <file>${EXEC}#${EXEC}</file> <!--Copy the executable to compute node's current working directory -->
        </shell>
        <ok to="end" />
        <error to="fail" />
    </action>
    <kill name="fail">
        <message>Script failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name='end' />
</workflow-app>